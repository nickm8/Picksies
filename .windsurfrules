You are an expert TypeScript full-stack engineer specializing in building modern, type-safe applications. Your task is to build a **Movie Watchlist Application** using the following stack:

- **Frontend**: React 18 with TypeScript, Vite
- **Backend**: FastAPI with Pydantic models
- **Database**: SQLite with SQLAlchemy 2.0
- **State Management**: Zustand for global state, React Query for server state
- **Styling**: Tailwind CSS with shadcn/ui components
- **External API**: Overseerr API for movie data

The application should feature UUID-based sharing, real-time updates via polling, and advanced filtering capabilities.

---

## Technical Architecture

### Backend API

1. Implement the following endpoints:
   - `GET /watchlist/{list_id}`: Retrieve a watchlist by UUID.
   - `POST /watchlist`: Create a new watchlist.
   - `GET /watchlist/{list_id}/movies`: Retrieve all movies in a watchlist.
   - `POST /watchlist/{list_id}/movies`: Add a movie to a watchlist.
   - `PATCH /watchlist/{list_id}/movies/{movie_id}`: Update a movie (e.g., mark as watched).
   - `DELETE /watchlist/{list_id}/movies/{movie_id}`: Remove a movie from a watchlist.
   - `GET /search?query={search_term}`: Search for movies by title.
   - `GET /discover`: Discover movies with advanced filtering options.

2. Use Pydantic models for request and response validation:
   ```
   class MovieBase(BaseModel):
       title: str
       tmdb_id: int
       year: Optional[int] = None
       poster_path: Optional[str] = None
       overview: Optional[str] = None
       vote_average: Optional[float] = None
       genre_ids: Optional[str] = None

   class Movie(MovieBase):
       id: UUID
       status: str = "to_watch"
       watchlist_id: UUID
       created_at: datetime

       class Config:
           orm_mode = True
   ```

3. Integrate Overseerr API for search and discovery:
   ```
   class OverseerrService:
       def __init__(self):
           self.base_url = "https://overseerr-instance/api/v1"
           self.client = httpx.AsyncClient()

       async def search_movies(self, query: str, page: int = 1):
           response = await self.client.get(
               f"{self.base_url}/search",
               params={"query": query, "page": page}
           )
           return response.json()

       async def discover_movies(self, filters: dict):
           response = await self.client.get(
               f"{self.base_url}/discover/movies",
               params=filters
           )
           return response.json()
   ```

---

### Database Schema

Define the following database schema using SQLAlchemy 2.0:

```
# Watchlists table
class Watchlist(Base):
    __tablename__ = "watchlists"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    name = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

# Movies table
class Movie(Base):
    __tablename__ = "movies"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    tmdb_id = Column(Integer, nullable=False)
    title = Column(String(255), nullable=False)
    year = Column(Integer)
    poster_path = Column(Text)
    overview = Column(Text)
    vote_average = Column(Float)
    genre_ids = Column(Text)  # JSON string of genres
    status = Column(Enum("to_watch", "watched", name="movie_status"), default="to_watch", nullable=False)
    watchlist_id = Column(UUID(as_uuid=True), ForeignKey("watchlists.id", ondelete="CASCADE"), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
```

---

### Frontend Architecture

1. **Component Structure**:
   ```
   src/
   ├── components/
   │   ├── layout/
   │   ├── movie/
   │   ├── watchlist/
   │   └── ui/
   ├── hooks/
   ├── pages/
   └── services/
   ```

2. **State Management**:
   - Use React Query for server state and polling:
     ```
     export function useWatchlist(listId: string) {
         return useQuery({
             queryKey: ["watchlist", listId],
             queryFn: () => fetchWatchlist(listId),
             refetchInterval: 3000,
         });
     }
     ```
   - Use Zustand for UI state:
     ```
     export const useWatchlistStore = create((set) => ({
         activeTab: "to_watch",
         setActiveTab: (tab) => set({ activeTab: tab }),
         filters: { genre: null, year: null, rating: null },
         setFilter: (key, value) => set((state) => ({
             filters: { ...state.filters, [key]: value }
         })),
     }));
     ```

3. **UI Components**:
   - Implement reusable components like `MovieCard`, `MovieGrid`, and `WatchlistTabs` using TailwindCSS and shadcn/ui.

4. **Pages**:
   - Create the following pages:
     - HomePage (Landing Page)
     - WatchlistPage (View and manage a single watchlist)
     - SearchPage (Search and discover movies)

---

## Styling Guidelines

1. Use TailwindCSS for styling with shadcn/ui components for accessibility.
2. Default to dark mode.
3. Ensure responsiveness with grid layouts for movie posters.

Example of a responsive grid layout:
```
export function MovieGrid({ movies }: { movies: Movie[] }) {
    return (
        
            {movies.map((movie) => (
                
            ))}
        
    );
}
```

---

## Development Workflow

1. Set up the database schema using SQLAlchemy.
2. Implement backend API endpoints with FastAPI.
3. Build frontend UI components using React and TailwindCSS.
4. Integrate the frontend with the backend using React Query.
5. Add client-side filtering and search functionality.
6. Implement real-time updates via polling (3-second interval).
7. Test thoroughly across different devices and screen sizes.

---

## Deployment & Operations

1. Dockerize the application for deployment.
2. Use environment variables for configuration (e.g., Overseerr API URL).
3. Set up CI/CD pipelines to automate testing and deployment.

---

